##Macro1 
##Macro2 
##Macro3 
##Macro4
##Macro5
##Macro6
##Macro7
##Macro8
##Macro9
##Macro10
##LoopIncrement1 12
##LoopIncrement2 
##LoopIncrement3 
##LoopIncrement4 
##LoopIncrement5
##LoopIncrement6
##LoopIncrement7
##LoopIncrement8
##LoopIncrement9
##LoopIncrement10

##ToFile AEmemcpy.h



#pragma once

#include <cstdint>
#include <string.h>
##LOOP_1##
 
static void AEmemcpyManyFromBottomUp<#i#>(
<#if1#>void* dst, void* src  <#ifEND#>
<#if2#>,void* dst2, void* src2  <#ifEND#>
<#if3#>,void* dst3, void* src3  <#ifEND#>
<#if4#>,void* dst4, void* src4  <#ifEND#>
<#if5#>,void* dst5, void* src5  <#ifEND#>
<#if6#>,void* dst6, void* src6  <#ifEND#> 
<#if7#>,void* dst7, void* src7   <#ifEND#>
<#if8#>,void* dst8, void* src8   <#ifEND#>
<#if9#>,void* dst9, void* src9   <#ifEND#>
<#if10#>,void* dst10, void* src10    <#ifEND#>
<#if11#>,void* dst11, void* src11    <#ifEND#>
<#if12#>,void* dst12, void* src12    <#ifEND#>
	,uint32_t sizeForAllVars)
{

	//for now the sizes can only be the same for all vars
	uint32_t size = sizeForAllVars;

	// copy by the largest it is divisible by
	uint32_t remainder;
	uint32_t timesToCopy;


	if (size < 10)
	{
		<#if1#>memcpy(dst, src, size);<#ifEND#>
		<#if2#>memcpy(dst2, src2, size);<#ifEND#>
		<#if3#>memcpy(dst3, src3, size);<#ifEND#>
		<#if4#>memcpy(dst4, src4, size);<#ifEND#>
		<#if5#>memcpy(dst5, src5, size);<#ifEND#>
		<#if6#>memcpy(dst6, src6, size);<#ifEND#> 
		<#if7#>memcpy(dst7, src7, size);<#ifEND#> 
		<#if8#>memcpy(dst8, src8, size);<#ifEND#> 
		<#if9#>memcpy(dst9, src9, size);<#ifEND#> 
		<#if10#>memcpy(dst10, src10, size);<#ifEND#> 
		<#if11#>memcpy(dst11, src11, size);<#ifEND#> 
		<#if12#>memcpy(dst12, src12, size);<#ifEND#> 
	}
	else if (size <= 100)
	{
		<#if1#>char *destp = (char *)dst; char *srcp = (char *)src;<#ifEND#>
		<#if2#>char *destp2 = (char *)dst2; char *srcp2 = (char *)src2;<#ifEND#>
		<#if3#>char *destp3 = (char *)dst3; char *srcp3 = (char *)src3;<#ifEND#>
		<#if4#>char *destp4 = (char *)dst4; char *srcp4 = (char *)src4;<#ifEND#>
		<#if5#>char *destp5 = (char *)dst5; char *srcp5 = (char *)src5;<#ifEND#>
		<#if6#>char *destp6 = (char *)dst6; char *srcp6 = (char *)src6;<#ifEND#>
		<#if7#>char *destp7 = (char *)dst7; char *srcp7 = (char *)src7;<#ifEND#>
		<#if8#>char *destp8 = (char *)dst8; char *srcp8 = (char *)src8;<#ifEND#>
		<#if9#>char *destp9 = (char *)dst9; char *srcp9 = (char *)src9;<#ifEND#>
		<#if10#>char *destp10 = (char *)dst10; char *srcp10 = (char *)src10;<#ifEND#>
		<#if11#>char *destp11 = (char *)dst11; char *srcp11 = (char *)src11;<#ifEND#>
		<#if12#>char *destp12 = (char *)dst12; char *srcp12 = (char *)src12;<#ifEND#>
 

		remainder = size % 10;
		timesToCopy = size / 10;

		//copy elements in increments but always start with an increment of 10
		//up to 100 
		for (uint32_t i = 0; i < timesToCopy; i++)
		{
		 <#if1#>memcpy(destp + (i * 10), srcp + (i * 10), 10);<#ifEND#> 
		 <#if2#>memcpy(destp2 + (i * 10), srcp2 + (i * 10), 10);<#ifEND#> 
		 <#if3#>memcpy(destp3 + (i * 10), srcp3 + (i * 10), 10);<#ifEND#> 
		 <#if4#>memcpy(destp4 + (i * 10), srcp4 + (i * 10), 10);<#ifEND#> 
		 <#if5#>memcpy(destp5 + (i * 10), srcp5 + (i * 10), 10);<#ifEND#> 
		 <#if6#>memcpy(destp6 + (i * 10), srcp6 + (i * 10), 10);<#ifEND#> 
		 <#if7#>memcpy(destp7 + (i * 10), srcp7 + (i * 10), 10);<#ifEND#> 
		 <#if8#>memcpy(destp8 + (i * 10), srcp8 + (i * 10), 10);<#ifEND#> 
		 <#if9#>memcpy(destp9 + (i * 10), srcp9 + (i * 10), 10);<#ifEND#> 
		 <#if10#>memcpy(destp10 + (i * 10), srcp10 + (i * 10), 10);<#ifEND#> 
		 <#if11#>memcpy(destp11 + (i * 10), srcp11 + (i * 10), 10);<#ifEND#> 
		 <#if12#>memcpy(destp12 + (i * 10), srcp12 + (i * 10), 10);<#ifEND#> 

		}

		<#if1#>memcpy(destp + (timesToCopy * 10), srcp + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if2#>memcpy(destp2 + (timesToCopy * 10), srcp2 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if3#>memcpy(destp3 + (timesToCopy * 10), srcp3 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if4#>memcpy(destp4 + (timesToCopy * 10), srcp4 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if5#>memcpy(destp5 + (timesToCopy * 10), srcp5 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if6#>memcpy(destp6 + (timesToCopy * 10), srcp6 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if7#>memcpy(destp7 + (timesToCopy * 10), srcp7 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if8#>memcpy(destp8 + (timesToCopy * 10), srcp8 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if9#>memcpy(destp9 + (timesToCopy * 10), srcp9 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if10#>memcpy(destp10 + (timesToCopy * 10), srcp10 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if11#>memcpy(destp11 + (timesToCopy * 10), srcp11 + (timesToCopy * 10), remainder);<#ifEND#> 
		<#if12#>memcpy(destp12 + (timesToCopy * 10), srcp12 + (timesToCopy * 10), remainder);<#ifEND#> 


	}
	else
	{
		for (uint32_t i = 1000; i < 1000000000; i = i * 10)
		{
			if (size <= i)
			{
					<#if1#>char *destp = (char *)dst; char *srcp = (char *)src;<#ifEND#>
		<#if2#>char *destp2 = (char *)dst2; char *srcp2 = (char *)src2;<#ifEND#>
		<#if3#>char *destp3 = (char *)dst3; char *srcp3 = (char *)src3;<#ifEND#>
		<#if4#>char *destp4 = (char *)dst4; char *srcp4 = (char *)src4;<#ifEND#>
		<#if5#>char *destp5 = (char *)dst5; char *srcp5 = (char *)src5;<#ifEND#>
		<#if6#>char *destp6 = (char *)dst6; char *srcp6 = (char *)src6;<#ifEND#>
		<#if7#>char *destp7 = (char *)dst7; char *srcp7 = (char *)src7;<#ifEND#>
		<#if8#>char *destp8 = (char *)dst8; char *srcp8 = (char *)src8;<#ifEND#>
		<#if9#>char *destp9 = (char *)dst9; char *srcp9 = (char *)src9;<#ifEND#>
		<#if10#>char *destp10 = (char *)dst10; char *srcp10 = (char *)src10;<#ifEND#>
		<#if11#>char *destp11 = (char *)dst11; char *srcp11 = (char *)src11;<#ifEND#>
		<#if12#>char *destp12 = (char *)dst12; char *srcp12 = (char *)src12;<#ifEND#>



				//copy 100 elments first
				for (uint32_t i = 0; i < 10; i++)
				{
					<#if1#>memcpy(destp + (i * 10), srcp + (i * 10), 10);<#ifEND#>
					<#if2#>memcpy(destp2 + (i * 10), srcp2 + (i * 10), 10);<#ifEND#>
					<#if3#>memcpy(destp3 + (i * 10), srcp3 + (i * 10), 10);<#ifEND#>
					<#if4#>memcpy(destp4 + (i * 10), srcp4 + (i * 10), 10);<#ifEND#>
					<#if5#>memcpy(destp5 + (i * 10), srcp5 + (i * 10), 10);<#ifEND#>
					<#if6#>memcpy(destp6 + (i * 10), srcp6 + (i * 10), 10);<#ifEND#> 
					<#if7#>memcpy(destp7 + (i * 10), srcp7 + (i * 10), 10);<#ifEND#> 
					<#if8#>memcpy(destp8 + (i * 10), srcp8 + (i * 10), 10);<#ifEND#> 
					<#if9#>memcpy(destp9 + (i * 10), srcp9 + (i * 10), 10);<#ifEND#> 
					<#if10#>memcpy(destp10 + (i * 10), srcp10 + (i * 10), 10);<#ifEND#> 
					<#if11#>memcpy(destp11 + (i * 10), srcp11 + (i * 10), 10);<#ifEND#> 
					<#if12#>memcpy(destp12 + (i * 10), srcp12 + (i * 10), 10);<#ifEND#> 
				}
				size = size - 100;

				uint32_t incrmentby = (i / 10);
				remainder = size % incrmentby;
				timesToCopy = size / incrmentby;

				for (uint32_t i = 0; i < timesToCopy; i++)
				{
					<#if1#>memcpy(destp + ((i * incrmentby) + 100), (srcp + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if2#>memcpy(destp2 + ((i * incrmentby) + 100), (srcp2 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if3#>memcpy(destp3 + ((i * incrmentby) + 100), (srcp3 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if4#>memcpy(destp4 + ((i * incrmentby) + 100), (srcp4 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if5#>memcpy(destp5 + ((i * incrmentby) + 100), (srcp5 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if6#>memcpy(destp6 + ((i * incrmentby) + 100), (srcp6 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if7#>memcpy(destp7 + ((i * incrmentby) + 100), (srcp7 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if8#>memcpy(destp8 + ((i * incrmentby) + 100), (srcp8 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if9#>memcpy(destp9 + ((i * incrmentby) + 100), (srcp9 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if10#>memcpy(destp10 + ((i * incrmentby) + 100), (srcp10 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if11#>memcpy(destp11 + ((i * incrmentby) + 100), (srcp11 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
					<#if12#>memcpy(destp12 + ((i * incrmentby) + 100), (srcp12 + (i * incrmentby) + 100), incrmentby);<#ifEND#> 
 
				}

				<#if1#>memcpy(destp + ((timesToCopy * incrmentby) + 100), srcp + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#>
				<#if2#>memcpy(destp2 + ((timesToCopy * incrmentby) + 100), srcp2 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#>
				<#if3#>memcpy(destp3 + ((timesToCopy * incrmentby) + 100), srcp3 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#>
				<#if4#>memcpy(destp4 + ((timesToCopy * incrmentby) + 100), srcp4 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#>
				<#if5#>memcpy(destp5 + ((timesToCopy * incrmentby) + 100), srcp5 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#>
				<#if6#>memcpy(destp6 + ((timesToCopy * incrmentby) + 100), srcp6 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 
				<#if7#>memcpy(destp7 + ((timesToCopy * incrmentby) + 100), srcp7 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 
				<#if8#>memcpy(destp8 + ((timesToCopy * incrmentby) + 100), srcp8 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 
				<#if9#>memcpy(destp9 + ((timesToCopy * incrmentby) + 100), srcp9 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 
				<#if10#>memcpy(destp10 + ((timesToCopy * incrmentby) + 100), srcp10 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 
				<#if11#>memcpy(destp11 + ((timesToCopy * incrmentby) + 100), srcp11 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 
				<#if12#>memcpy(destp12 + ((timesToCopy * incrmentby) + 100), srcp12 + ((timesToCopy * incrmentby) + 100), remainder);<#ifEND#> 

				break;
			}
		}
	}


}


##END##