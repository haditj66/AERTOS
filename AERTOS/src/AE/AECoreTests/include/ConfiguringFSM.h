//generated file: C:/AERTOS/AERTOS/src/AE/AECoreTests\include\ConfiguringFSM.h
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of C:\CodeGenerator\CodeGenerator\bin\Debug\..\..\FileTemplates\Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.

//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#pragma once
 
#include "AEClock.h"

#include "AESimpleFSM.h"
 
#include "AEEventBase.h" 

 

//UserCode_Sectionheader
extern int StateTracker;
//UserCode_Sectionheader_end
 

class ConfiguringFSM : public AESimpleFSM<ConfiguringFSM>
{
public:
	ConfiguringFSM() 
	{
	//UserCode_Sectionctor
//UserCode_Sectionctor_end
	};

	//UserCode_Sectionpublic
//UserCode_Sectionpublic_end

	static AETransitionType Idle(TypeOfThisFSM* const thisFSM, AEEventDiscriminator_t const * const evt);
static AETransitionType SettingTopLimit(TypeOfThisFSM* const thisFSM, AEEventDiscriminator_t const * const evt);
static AETransitionType SettingBottomLimit(TypeOfThisFSM* const thisFSM, AEEventDiscriminator_t const * const evt);
 


	// Inherited via AESimpleFSM
	StateFuncPtr InitialState() override;
	
protected:

	//UserCode_Sectionprot
//UserCode_Sectionprot_end

};


//UserCode_Sectionfunc
//UserCode_Sectionfunc_end
 



//state: Idle ======================================================
inline AETransitionType ConfiguringFSM::Idle(TypeOfThisFSM * const thisFSM, AEEventDiscriminator_t const * const evt)
{
	AETransitionType transitionType = UNHANDLED;

	//UserCode_SectionIdlea
//UserCode_SectionIdlea_end
	
	
	auto evtId = evt->GetEvtID();
	switch (evtId)
	{
	case Enter_Sig:
	{
         thisFSM->Subscribe<Button1>();
         thisFSM->Subscribe<Button2>();
         thisFSM->Subscribe<Button3>();
         thisFSM->StartUpdateTimer(100);
 
		
	//UserCode_SectionIdleenter
		StateTracker = 20;
//UserCode_SectionIdleenter_end
		 
		 
		break;
	}
	case Exit_Sig:
	{
          thisFSM->UnSubscribe<Button1>();
          thisFSM->UnSubscribe<Button2>();
          thisFSM->UnSubscribe<Button3>();
          thisFSM->StopUpdateTimer();
 
		
	//UserCode_SectionIdleexit
//UserCode_SectionIdleexit_end
		
		break;
	}
	

// Button1 ------------------------------------------------------------
    case Button1:
     {
    //UserCode_SectionIdleButton1
	     AEPrint("\nConfigBlind:  Idle:Button1\n");
//UserCode_SectionIdleButton1_end
        break;
     }


// Button2 ------------------------------------------------------------
    case Button2:
     {
    //UserCode_SectionIdleButton2
	     AEPrint("\nConfigBlind:  Idle:Button2\n");
//UserCode_SectionIdleButton2_end
        break;
     }


// Button3 ------------------------------------------------------------
    case Button3:
     {
    //UserCode_SectionIdleButton3
	     AEPrint("\nConfigBlind:  Idle:Button3\n");
//UserCode_SectionIdleButton3_end
        TRANSITION_TOSTATE(&SettingTopLimit)
        break;
     }

 
	
	default:
		break;
	}

	return transitionType;
}


//state: SettingTopLimit ======================================================
inline AETransitionType ConfiguringFSM::SettingTopLimit(TypeOfThisFSM * const thisFSM, AEEventDiscriminator_t const * const evt)
{
	AETransitionType transitionType = UNHANDLED;

	//UserCode_SectionSettingTopLimita
//UserCode_SectionSettingTopLimita_end
	
	
	auto evtId = evt->GetEvtID();
	switch (evtId)
	{
	case Enter_Sig:
	{
         thisFSM->Subscribe<Button1>();
         thisFSM->Subscribe<Button2>();
         thisFSM->Subscribe<Button3>();
         thisFSM->StartUpdateTimer(100);
 
		
	//UserCode_SectionSettingTopLimitenter
		StateTracker = 30;
//UserCode_SectionSettingTopLimitenter_end
		 
		 
		break;
	}
	case Exit_Sig:
	{
          thisFSM->UnSubscribe<Button1>();
          thisFSM->UnSubscribe<Button2>();
          thisFSM->UnSubscribe<Button3>();
          thisFSM->StopUpdateTimer();
 
		
	//UserCode_SectionSettingTopLimitexit
//UserCode_SectionSettingTopLimitexit_end
		
		break;
	}
	

// Button1 ------------------------------------------------------------
    case Button1:
     {
    //UserCode_SectionSettingTopLimitButton1
	     AEPrint("\nConfigBlind:  SettingTopLimit:Button1\n");
//UserCode_SectionSettingTopLimitButton1_end
        break;
     }


// Button2 ------------------------------------------------------------
    case Button2:
     {
    //UserCode_SectionSettingTopLimitButton2
	     AEPrint("\nConfigBlind:  SettingTopLimit:Button2\n");
//UserCode_SectionSettingTopLimitButton2_end
        break;
     }


// Button3 ------------------------------------------------------------
    case Button3:
     {
    //UserCode_SectionSettingTopLimitButton3
	     AEPrint("\nConfigBlind:  SettingTopLimit:Button3\n");
//UserCode_SectionSettingTopLimitButton3_end
        TRANSITION_TOSTATE(&SettingBottomLimit)
        break;
     }

 
	
	default:
		break;
	}

	return transitionType;
}


//state: SettingBottomLimit ======================================================
inline AETransitionType ConfiguringFSM::SettingBottomLimit(TypeOfThisFSM * const thisFSM, AEEventDiscriminator_t const * const evt)
{
	AETransitionType transitionType = UNHANDLED;

	//UserCode_SectionSettingBottomLimita
//UserCode_SectionSettingBottomLimita_end
	
	
	auto evtId = evt->GetEvtID();
	switch (evtId)
	{
	case Enter_Sig:
	{
         thisFSM->Subscribe<Button1>();
         thisFSM->Subscribe<Button2>();
         thisFSM->Subscribe<Button3>();
         thisFSM->StartUpdateTimer(100);
 
		
	//UserCode_SectionSettingBottomLimitenter
		StateTracker = 40;
//UserCode_SectionSettingBottomLimitenter_end
		 
		 
		break;
	}
	case Exit_Sig:
	{
          thisFSM->UnSubscribe<Button1>();
          thisFSM->UnSubscribe<Button2>();
          thisFSM->UnSubscribe<Button3>();
          thisFSM->StopUpdateTimer();
 
		
	//UserCode_SectionSettingBottomLimitexit
//UserCode_SectionSettingBottomLimitexit_end
		
		break;
	}
	

// Button1 ------------------------------------------------------------
    case Button1:
     {
    //UserCode_SectionSettingBottomLimitButton1
	     AEPrint("\nConfigBlind:  SettingBottomLimit:Button1\n");
//UserCode_SectionSettingBottomLimitButton1_end
        break;
     }


// Button2 ------------------------------------------------------------
    case Button2:
     {
    //UserCode_SectionSettingBottomLimitButton2
	     AEPrint("\nConfigBlind:  SettingBottomLimit:Button2\n");
//UserCode_SectionSettingBottomLimitButton2_end
        break;
     }


// Button3 ------------------------------------------------------------
    case Button3:
     {
    //UserCode_SectionSettingBottomLimitButton3
	     AEPrint("\nConfigBlind:  SettingBottomLimit:Button3\n");
//UserCode_SectionSettingBottomLimitButton3_end
        AE_EXIT()
        break;
     }

 
	
	default:
		break;
	}

	return transitionType;
} 


inline ConfiguringFSM::StateFuncPtr ConfiguringFSM::InitialState()
{
	return CastToStateFuncPtr(&Idle);
}
