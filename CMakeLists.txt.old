#-----------------------------------------
# Root 
# Targets: FreeRTOS  BSP 
#-----------------------------------------

 
cmake_minimum_required(VERSION 3.15)
  

set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --save-temps")

set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --save-temps")

###################################
#User Options
###################################
 

#platform WINDOWS_SWIL_FREERTOS

#platforms consist of Build_System-TOOLCHAIN_USED
# the platform will build within its own build directory so to have all the necessary build files
# for the build system and toolchain already located in that build directory.
# OSUSED_TOOLCHAINUSED
if(${PLATFORM} STREQUAL "VSGDBCmakeNinja_mingw" )

    #set(Build_System VSGDBCmake_Ninja)
    #add_compile_definitions(Build_System "${Build_System}")
    #set(TOOLCHAIN_USED mingw)
    #add_compile_definitions(TOOLCHAIN_USED "${TOOLCHAIN_USED}")
#
#
    #set(AERTOS_ENVIRONMENT RTOS_PC)
    #add_compile_definitions(AERTOS_ENVIRONMENT "${AERTOS_ENVIRONMENT}")
#
    #set(OS_USED WINDOWS)
    #add_compile_definitions(OS_USED "${OS_USED}")
    #set(SWIL_HWIL_DRIVEN SWIL)
    #add_compile_definitions(SWIL_HWIL_DRIVEN "${SWIL_HWIL_DRIVEN}")
    #set(BOARD_USED X64)
    #add_compile_definitions(BOARD_USED "${BOARD_USED}")




elseif(${PLATFORM} STREQUAL "CmakeUnixMakefiles_gnu" )


#    set(Build_System Cmake_UnixMakefiles)
#    add_compile_definitions(Build_System "${Build_System}")
#    set(TOOLCHAIN_USED gnu)
#    add_compile_definitions(TOOLCHAIN_USED "${TOOLCHAIN_USED}")
#
#
#    set(RTOS_USED NONE)
#    add_compile_definitions(RTOS_USED "${RTOS_USED}")
#    set(OS_USED UBUNTU)
#    add_compile_definitions(OS_USED "${OS_USED}")

#    set(USING_LINUX 1)
#    add_compile_definitions(USING_LINUX "${USING_LINUX}")


elseif(${PLATFORM} STREQUAL "VSGDBCmakeNinja_armnoneabiid" )

    #set(Build_System VSGDBCmake_Ninja)
    #add_compile_definitions(Build_System "${Build_System}")
    #set(TOOLCHAIN_USED arm_non_eabi_id)
    #add_compile_definitions(TOOLCHAIN_USED "${TOOLCHAIN_USED}")
#
#
    #set(AERTOS_ENVIRONMENT RTOS_MICRO)
    #add_compile_definitions(AERTOS_ENVIRONMENT "${AERTOS_ENVIRONMENT}")
    #set(OS_USED NONE)
    #add_compile_definitions(OS_USED "${OS_USED}")
    #set(SWIL_HWIL_DRIVEN HWIL)
    #add_compile_definitions(SWIL_HWIL_DRIVEN "${SWIL_HWIL_DRIVEN}")



endif()

#if(NOT ${OS_USED} STREQUAL "UBUNTU")
    if (WIN32)
    set(CODEGENGUI_PATH "C:/Users/Hadi/OneDrive/Documents/VisualStudioprojects/Projects/cSharp/CodeGenerator/CodeGenerator/CgenCmakeGui")
    FILE(READ "${CODEGENGUI_PATH}/CgenCmakeConfigFunctions.cmake" contentsOut)
    FILE(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/CgenCmakeConfigFunctions.cmake" ${contentsOut})
    endif()
#endif()
include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/CgenCmakeConfigFunctions.cmake")
Cgen_Start()

 
Cgen_Option(
        NAME AEPLATFORM
        DESCRIPTION "what platform is this for (this is chosen by IDE command line -D variable)"
        POSSIBLEVALUES VSGDBCmakeNinja_mingw VSGDBCmakeNinja_armnoneabiid CmakeUnixMakefiles_gnu
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option( 
        NAME AERTOS_ENVIRONMENT
        DESCRIPTION "what environment is this AE application set in"
        POSSIBLEVALUES RTOS_MICRO RTOS_PC ROS_MICRO ROS_PC
        CONSTRICTS_LATER_OPTIONS
)


#the Build_System consists of the CmakeStyle_Generator
Cgen_Option(
        NAME Build_System
        DESCRIPTION "what kind of build environment are you using"
        POSSIBLEVALUES VSGDBCmake_Ninja AmentCmake_colcon Cmake_UnixMakefiles Cmake_MinGWMakefiles
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME RTOS_USED
        DESCRIPTION "is an RTOS used"
        POSSIBLEVALUES FREERTOS NONE
        CONSTRICTS_LATER_OPTIONS
)
 
Cgen_Option(
        NAME OS_USED
        DESCRIPTION "what OS is used"
        POSSIBLEVALUES WINDOWS UBUNTU NONE
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME SIM_REAL
        DESCRIPTION "are input/outputs data coming from real sensors or from a simulated environment"
        POSSIBLEVALUES REALITY SIMULATION
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME SWIL_HWIL_DRIVEN
        DESCRIPTION "is this software or hardware in the loop. (is HAL being used or a mock)"
        POSSIBLEVALUES SWIL HWIL
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME BOARD_USED
        DESCRIPTION "what device board is being used"
        POSSIBLEVALUES RPI4B JetsonNano X64 STM32F411RE
        CONSTRICTS_LATER_OPTIONS
)

#toolchain consists of the Ccompiler, c++compiler, and  debugger package used
Cgen_Option(
        NAME TOOLCHAIN_USED
        DESCRIPTION
        POSSIBLEVALUES arm_non_eabi_id mingw gnu
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME INTEGRATION_TESTS
        DESCRIPTION "choose an integration test to build"
        POSSIBLEVALUES AECore_Tests1 AEHal_Tests1
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME BUILD_UNIT_TESTS
        DESCRIPTION "to build all UNIT tests under the test group chosen"
        POSSIBLEVALUES TRUE FALSE
        CONSTRICTS_LATER_OPTIONS
)

Cgen_Option(
        NAME BUILD_TESTS
        DESCRIPTION "to build INTEGRATION any tests or not"
        POSSIBLEVALUES TRUE FALSE
        CONSTRICTS_LATER_OPTIONS
)


#write the proper toolchain file to its build location since VSGDB auto generates the toolchain file. I want to write over it.
if(NOT ${OS_USED} STREQUAL "UBUNTU")
SET(CMAKE_TOOLCHAIN_FILE "C:/visualgdb_projects/AERTOSCopy/toolchains/${TOOLCHAIN_USED}/toolchain.cmake" )


    if (NOT EXISTS "${CMAKE_TOOLCHAIN_FILE}")
        message(FATAL_ERROR "Hadi: The toolchain file ${CMAKE_TOOLCHAIN_FILE} does not exist")
    endif ()
     

    file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/build/${PLATFORM}/debug/toolchain.cmake" "include(${CMAKE_TOOLCHAIN_FILE})")
     
endif()




 if(${PLATFORM} STREQUAL "CmakeUnixMakefiles_gnu" )
    if (NOT WIN32)
project(AERTOS LANGUAGES C CXX ASM)
 endif()
 else()
 project(AERTOS LANGUAGES C CXX ASM)
  endif()

include("cmake/MyCmakeHelpers.cmake")

  

message("workspaceRoot-------------------------${VS_DEBUGGER_WORKING_DIRECTORY}")
 


  #add_compile_definitions(AEConfigLocation="C:/visualgdb_projects/AERTOS/src/AE/exeTest/AEConfig.h")

set(clion TRUE)




include("cmake/GetBoardMetaTypes.cmake")


Set_Sources_in_SourceGroup(NAMEOFGROUP "GeneratorInputFiles" LISTOFSOURCES  ${AESetupFiles})



################
#Not chosen by user
################


#this variable indicates whether find_test_framework(ID com.sysprogs.unittest.googletest) 
#for google tests has been run yet
set(IsFindTestFrameworkRan FALSE)


if(${BUILD_TESTS} STREQUAL "TRUE" )

    Cgen_Option(
            NAME TestGroups
            DESCRIPTION "what test group do you wanna enable"
            POSSIBLEVALUES Test_Group1 Test_Group2 Test_Group3 Test_Group4
            CONSTRICTS_LATER_OPTIONS
    )

endif()

if(${BUILD_UNIT_TESTS} STREQUAL "TRUE" )

    Cgen_Option(
            NAME TestGroups
            DESCRIPTION "what test group do you wanna enable"
            POSSIBLEVALUES Test_Group1 Test_Group2 Test_Group3 Test_Group4
            CONSTRICTS_LATER_OPTIONS
    )

endif()



set(PATH_TO_TEST_CONFIG  "${CMAKE_SOURCE_DIR}/test/${TestGroups}")
set(SRCS_TO_TEST_CONFIG  "${PATH_TO_TEST_CONFIG}/AEConfig.h"
        "${PATH_TO_TEST_CONFIG}/UserBSPConfig.cpp")




set(FreeRTOS_HEAP_TYPE)
if(${SWIL_HWIL_DRIVEN} STREQUAL "SWIL" )
    set(FreeRTOS_HEAP_TYPE heap_4)

else(${SWIL_HWIL_DRIVEN} STREQUAL "HWIL" )
    set(FreeRTOS_HEAP_TYPE heap_1)
endif()



################
#VSGDB initialize
################

if(${Build_System} STREQUAL "VSGDBCmake_Ninja" )
find_bsp(
	ID com.sysprogs.arm.stm32
	VERSION 2021.02
	MCU STM32F411RE
	FRAMEWORKS
		com.sysprogs.arm.stm32.freertos
		com.sysprogs.arm.stm32.hal
		com.sysprogs.arm.stm32.ll
		com.sysprogs.embedded.semihosting_and_profiler
	HWREGISTER_LIST_FILE STM32F4xxxx/DeviceDefinitions/stm32f411xe.xml
	FWCONFIGURATION com.sysprogs.bspoptions.stm32.freertos.portcore=CM4F
	FWCONFIGURATION com.sysprogs.bspoptions.stm32.freertos.heap=${FreeRTOS_HEAP_TYPE})

find_test_framework(ID com.sysprogs.unittest.googletest) 
set(IsFindTestFrameworkRan TRUE)
endif()


 ###################################
 #variables
 #declaring all CompileDefines, Sources, and IncludePaths that all subdirectories will inherit from
 ###################################   

  #RTOS vars -----------
 set(RTOS_Defines)
 set(RTOS_IncludePaths)
 set(RTOS_Srcs)

   #this is the path to the files that are needed for the board I am using ie stm32f4xx_hal_conf.h
 set(PATH_TO_BOARD_SPECIFIC_FILES)
 set(BOARD_SPECIFIC_FILES)



#
 #set(COMPILEDEFINES_Simulation)
 #set(SOURCE_FILES_Simulation)
 #set(INCLUDE_PATHS_Simulation)
#
  #set(COMPILEDEFINES_Common)
 #set(SOURCE_FILES_Common)
 #set(INCLUDE_PATHS_Common)
 





 ###################################
 #declaring global definition preprocessors that will be used by all targets
 ###################################   
# add_compile_definitions(MCU_ARM_ARCHITECTURE ${_BSP_BSP_CONFIGURATION_com.sysprogs.bspoptions.arm.core})
# add_compile_definitions(MCU_ARM "${_BSP_MCU}")




#  set(COMPILEDEFINES_Hardware)



message("_BSP_MCU -----------------${_BSP_MCU}")
message(" _BSP_BSP_CONFIGURATION_com.sysprogs.bspoptions.arm.core ----------------- ${_BSP_BSP_CONFIGURATION_com.sysprogs.bspoptions.arm.core}") 
message("CMAKE_BUILD_TYPE -----------------${CMAKE_BUILD_TYPE}")
message("PLATFORM -----------------${PLATFORM}")




###################################
#FreeRTOS
#getting freertos Sources for SWIL mingw
###################################

if(${RTOS_USED} STREQUAL "FREERTOS" )
    if(${SWIL_HWIL_DRIVEN} STREQUAL "SWIL" )

        set(FREERTOS_EXTRA_SRCS #"${CMAKE_SOURCE_DIR}/src/AE/FreeRTOSConfig.h"
                #"${CMAKE_SOURCE_DIR}/src/AE/FreeRTOSConfigFiles/BoardSpecificFreeRTOSDefines.h"
                #"${CMAKE_SOURCE_DIR}/FreeRTOSConfigFiles/FreeRTOSSetUpFunctions.h"
                #"${CMAKE_SOURCE_DIR}/FreeRTOSConfigFiles/FreeRTOSSetUpFunctions.cpp"
                )
        set(FREERTOS_EXTRA_INCLUDES
                #"${CMAKE_SOURCE_DIR}"
                #"${CMAKE_SOURCE_DIR}/src/AE"
                #"${CMAKE_SOURCE_DIR}/FreeRTOSConfigFiles"
                )

        include("cmake/GetFREERTOS_MINGW.cmake")


    endif ()

        set(RTOS_Defines ${RTOS_Defines} RTOS_FREERTOS)
        set(RTOS_IncludePaths ${RTOS_IncludePaths}  ${FREERTOS_INCLUDES} "${CMAKE_SOURCE_DIR}/src/AE/FreeRTOSConfigFiles")

endif ()

  

  
###################################
 # BSP
 ###################################  


  
  #get files associated with board specific files that AE will need
  set(HalBoardType)  
  if(${SWIL_HWIL_DRIVEN} STREQUAL "SWIL" )
 set(HalBoardType simulated) 
 else()
  set(HalBoardType ${BOARD_USED})
 endif()
 set(PATH_TO_BOARD_SPECIFIC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/AE/hal/boards/${HalBoardType}/board_files")

  #just get whatever files are located in the boards/${HalBoardType} area
 file(GLOB BOARD_SPECIFIC_FILES
     "${PATH_TO_BOARD_SPECIFIC_FILES}/*.h"
     "${PATH_TO_BOARD_SPECIFIC_FILES}/*.cpp"
	 "${PATH_TO_BOARD_SPECIFIC_FILES}/*.cc"
	 "${PATH_TO_BOARD_SPECIFIC_FILES}/*.hpp"
	 "${PATH_TO_BOARD_SPECIFIC_FILES}/*.c"
)

if(${Build_System} STREQUAL "VSGDBCmake_Ninja" )
    target_include_directories(BSP PUBLIC ${PATH_TO_BOARD_SPECIFIC_FILES})
    target_include_directories(BSP PUBLIC  ${RTOS_IncludePaths})
endif()


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 






if(${BUILD_TESTS} STREQUAL "TRUE" )
 #add_subdirectory("test")
 endif()


 add_subdirectory("src/AE")









 CGEN_END()
