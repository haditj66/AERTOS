//generated file: C:/AERTOS/AERTOS/src/AE/AECoreTests\testFSM.cpp
//**********************************************************************
//this is an auto-generated file using the template file located in the directory of C:\CodeGenerator\CodeGenerator\bin\Debug\..\..\FileTemplates\Files
//ONLY WRITE CODE IN THE UserCode_Section BLOCKS
//If you write code anywhere else,  it will be overwritten. modify the actual template file if needing to modify code outside usersection blocks.

//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################


 
#if INTEGRATION_TESTS_FOR_AECoreTests__testFSM
 
#include "IntegTestPipeline.h"


#include "AECore.h"
#include "AE_Init.h" 
#include "AEClock.h" 
#include "AEObjects.h" 

DECLARE_ALL_AO_PTR

#include "AELoopObjectTest5.h"
static AELoopObjectTest5* objectTest;
#include "BlindsUITOPFSM.h"
static BlindsUITOPFSM* blinduifsm;
#include "ConfiguringFSM.h"
static ConfiguringFSM* configfsm;
#include "NormalOperationFSM.h"
static NormalOperationFSM* normalfsm;




//UserCode_Sectiona
int StateTracker = 0;
//UserCode_Sectiona_end

void RunSelectedIntegrationTest_testFSM()
{

AE_Init();
 //UserCode_Sectionbeforemain
	AEITEST_END_TestsAfterTimer_AECoreTests(5000); 
	AEITEST_EXPECT_TEST_TO_RUN_AECoreTests("FirstState");
	AEITEST_EXPECT_TEST_TO_RUN_AECoreTests("SecondState");
	AEITEST_EXPECT_TEST_TO_RUN_AECoreTests("ThirdState");
	AEITEST_EXPECT_TEST_TO_RUN_AECoreTests("FourthState");
	AEITEST_EXPECT_TEST_TO_RUN_AECoreTests("fifthState");
	AEITEST_EXPECT_TEST_TO_RUN_AECoreTests("sixthState");
//UserCode_Sectionbeforemain_end





static AELoopObjectTest5 objectTest_l;
objectTest = &objectTest_l;
objectTest->InitObject(5, AEPriorities::MediumPriority);

static BlindsUITOPFSM blinduifsm_l;
blinduifsm = &blinduifsm_l;
blinduifsm->Init(false, AEPriorities::MediumPriority, 1);

static ConfiguringFSM configfsm_l;
configfsm = &configfsm_l;
configfsm->Init(true, AEPriorities::MediumPriority, 100);

static NormalOperationFSM normalfsm_l;
normalfsm = &normalfsm_l;
normalfsm->Init(true, AEPriorities::MediumPriority, 1);



//UserCode_Sectionbeforelinks
//UserCode_Sectionbeforelinks_end
blinduifsm->AddSubmachine1(configfsm);
blinduifsm->AddSubmachine2(normalfsm);


//UserCode_Sectionbeforeclock
//UserCode_Sectionbeforeclock_end


//AEITEST_END_TestsAfterTimer_AECoreTests(5000);
//UserCode_Sectionb
//UserCode_Sectionb_end

AEAO::ConfigureAndStart();
}


//UserCode_Sectionc
//UserCode_Sectionc_end





#endif