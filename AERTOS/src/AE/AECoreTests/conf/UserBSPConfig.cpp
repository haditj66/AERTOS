//############################################### 
//this is an autogenerated file using cgen's macro2 command. Dont modify this file here unless it is in user sections 
//###############################################

#ifdef SWIL_HWIL_DRIVEN__HWIL



#ifndef USING_LINUX


#include "stm32f4xx_hal.h"
 






#if (PRINT_METHOD__PRINT_UART_NON_AE)

#include "UARTConsole.h"
#include <stdio.h>
#include <string.h>

static bool FirstToInitAEPrint = false;
 
void InitUARTNonAE()
{
	if (FirstToInitAEPrint == false)
	{
		UARTConsole_InitTypeDef uARTConsole_InitTypeDef;
		uARTConsole_InitTypeDef.BaudRate = 115200;
		Init_UARTConsole(&uARTConsole_InitTypeDef);
		//TransmitMsg("hi from uart console", 0); 

		FirstToInitAEPrint = true;
	}

}


void _AEPrint(char* msg) 
{
	
	InitUARTNonAE();
	
	TransmitMsg(msg, 0);
}  





#endif














void SystemClock_Config(void)
{



	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	//Configure the main internal regulator output voltage 

	__HAL_RCC_PWR_CLK_ENABLE();

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	//Initializes the CPU, AHB and APB busses clocks 

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 192;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 8;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		//_Error_Handler(__FILE__, __LINE__);
	}

	//Initializes the CPU, AHB and APB busses clocks 

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
	{
		//_Error_Handler(__FILE__, __LINE__);
	}

	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);

	//Configure the Systick interrupt time 

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);

	//Configure the Systick 

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	//SysTick_IRQn interrupt configuration 
	HAL_NVIC_SetPriority(SysTick_IRQn, 6, 0);


}

#endif













#endif